name: Test and build the sample game

on: workflow_dispatch

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

jobs:
  checkLicense:
    name: Check for the Unity license ☑️
    runs-on: ubuntu-latest
    steps:
      - name: Fail - No license ☠️
        if: ${{ !startsWith(env.UNITY_LICENSE, '<') }}
        run: exit 1


  testRunner:
    name: test everything
    needs: checkLicense
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Restore Library cache
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-test-project
          restore-keys: |
            Library-test-project-
            Library-

      - name: start test runner
        uses: game-ci/unity-test-runner@v3
        id: tests
        with:
          artifactsPath: tests-artifacts
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: Test Results
          coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+my.assembly.*'
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Test results
          path: ${{ steps.tests.outputs.artifactsPath }}
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Coverage results
          path: ${{ steps.tests.outputs.coveragePath }}


  # buildAndroid:
  #   name: Build for Android
  #   needs: testRunner
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: 